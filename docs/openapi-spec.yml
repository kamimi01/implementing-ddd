openapi: 3.0.0
paths:
  /api/v1/participants:
    get:
      operationId: ParticipantController_getParticipants
      summary: 参加者の一覧の取得または条件付き取得
      description: '- パラメータが存在しない場合は、条件なしで参加者の一覧を取得する'
      parameters:
        - name: page
          required: false
          in: query
          description: 取得するページ番号
          example: 1
          schema:
            minimum: 1
            type: number
        - name: issueIds
          required: false
          in: query
          description: 課題を識別するための唯一のID
          example:
            - 5
            - 12
          schema:
            type: array
            items:
              type: string
        - name: progressionStatus
          required: false
          in: query
          description: 参加者ごとの課題の進捗ステータス（未着手/着手中/レビュー待ち/完了）
          example: working
          schema:
            $ref: '#/components/schemas/ProgressionStatus'
      responses:
        '200':
          description: 取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetParticipantsResponse'
      tags: &ref_0
        - 参加者
    post:
      operationId: ParticipantController_createParticipants
      summary: 参加者の新規追加
      description: '- 参加者の新規追加を行う'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostParticipantsRequest'
      responses:
        '201':
          description: 登録成功のため、登録された参加者の情報を返却する
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Participants'
      tags: *ref_0
  /api/v1/participants/{participantId}/registration-status:
    patch:
      operationId: ParticipantController_updateParticipantRegistrationStatus
      summary: 参加者ごとの在籍ステータスの更新
      description: '- 参加者ごとの在籍ステータスの更新を行う'
      parameters:
        - name: participantId
          required: true
          in: path
          description: 参加者を識別するための唯一のID
          example: ae6b59c0-abff-4993-b2f5-76ba28e74c58
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchParticipantRegistrationStatusRequest'
      responses:
        '200':
          description: 更新成功のため、更新された参加者の情報を返却する
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Participants'
      tags: *ref_0
  /api/v1/teams:
    get:
      operationId: TeamController_getTeams
      summary: チームの一覧の取得
      description: '- チームの一覧を取得する'
      parameters: []
      responses:
        '200':
          description: 取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTeamsResponse'
      tags: &ref_1
        - チーム
  /api/v1/teams/{teamId}/add:
    patch:
      operationId: TeamController_addPairs
      summary: チームに所属するペアの追加
      description: '- チームにペアを追加する'
      parameters:
        - name: teamId
          required: true
          in: path
          description: チームを識別するための一意のID
          example: 8c7fd5c4-5bca-47ac-b15e-70b747d56611
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchTeamRequest'
      responses:
        '200':
          description: 追加成功したため、追加後のチームの情報を返却する
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Teams'
      tags: *ref_1
  /api/v1/teams/{teamId}/delete:
    patch:
      operationId: TeamController_deletePairs
      summary: チームに所属するペアの削除
      description: '- チームにペアを削除する'
      parameters:
        - name: teamId
          required: true
          in: path
          description: チームを識別するための一意のID
          example: 8c7fd5c4-5bca-47ac-b15e-70b747d56611
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchTeamRequest'
      responses:
        '200':
          description: 削除成功したため、削除後のチームの情報を返却する
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Teams'
      tags: *ref_1
  /api/v1/pairs:
    get:
      operationId: PairController_getPairs
      summary: ペアの一覧の取得
      description: '- ペアの一覧を取得する'
      parameters: []
      responses:
        '200':
          description: 取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPairsResponse'
      tags: &ref_2
        - ペア
  /api/v1/pairs/{pairId}/add:
    patch:
      operationId: PairController_addPairs
      summary: ペアに所属する参加者の追加
      description: '- ペアに参加者を追加する'
      parameters:
        - name: pairId
          required: true
          in: path
          description: ペアを識別するための一意のID
          example: 8c7fd5c4-5bca-47ac-b15e-70b747d56611
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchPairRequest'
      responses:
        '200':
          description: 追加成功したため、追加後のペアの情報を返却する
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pairs'
      tags: *ref_2
  /api/v1/pairs/{pairId}/delete:
    patch:
      operationId: PairController_deletePairs
      summary: ペアに所属する参加者の削除
      description: '- ペアに参加者を削除する'
      parameters:
        - name: pairId
          required: true
          in: path
          description: ペアを識別するための一意のID
          example: 8c7fd5c4-5bca-47ac-b15e-70b747d56611
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchPairRequest'
      responses:
        '200':
          description: 削除成功したため、削除後のペアの情報を返却する
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pairs'
      tags: *ref_2
  /api/v1/issues:
    post:
      operationId: IssueController_createIssues
      summary: 課題の新規追加
      description: '- 課題の新規追加を行う'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostIssuesRequest'
      responses:
        '201':
          description: 登録成功のため、登録された課題の情報を返却する
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issues'
      tags: &ref_3
        - 課題
  /api/v1/issues/{issueId}/participants/{participantId}/progression-status:
    patch:
      operationId: IssueController_updateIssueProgressionStatus
      summary: 課題の進捗ステータスを参加者ごとに更新
      description: '- 参加者ごとの課題の進捗ステータスの更新を行う'
      parameters:
        - name: issueId
          required: true
          in: path
          description: 課題を識別するための唯一のID
          example: 354efbbe-3738-4dfe-bc93-2615e90825b4
          schema:
            format: uuid
            type: string
        - name: participantId
          required: true
          in: path
          description: 参加者を識別するための唯一のID
          example: ae6b59c0-abff-4993-b2f5-76ba28e74c58
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchIssueProgressionStatusRequest'
      responses:
        '200':
          description: 更新成功のため、更新された課題の情報を返却する
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issues'
      tags: *ref_3
info:
  title: Praha ChallengeをDDDで実装する
  description: '- Praha ChallengeをDDDで実装する'
  version: '1.0'
  contact: {}
tags: []
servers:
  - url: http://localhost/api/v1
components:
  schemas:
    ProgressionStatus:
      type: string
      enum:
        - notStarted
        - working
        - waitingForReview
        - completed
    RegistrationStatus:
      type: string
      enum:
        - enroll
        - recess
        - withdrawal
    Participants:
      type: object
      properties:
        id:
          type: string
          description: 参加者を識別するための唯一のID
          format: uuid
          example: ae6b59c0-abff-4993-b2f5-76ba28e74c58
        name:
          type: string
          description: 参加者の名前
          example: 松本花子
        email:
          type: string
          description: 参加者のメールアドレス
          format: email
          example: hoge@mail.com
        registrationStatus:
          description: 参加者の在籍ステータス（在籍中/休会中/退会済み）
          example: recess
          $ref: '#/components/schemas/RegistrationStatus'
      required:
        - id
        - name
        - email
        - registrationStatus
    GetParticipantsResponse:
      type: object
      properties:
        participants:
          description: 参加者の一覧（1回で最大10人の情報を取得）
          maxItems: 10
          type: array
          items:
            $ref: '#/components/schemas/Participants'
      required:
        - participants
    PostParticipantsRequest:
      type: object
      properties:
        name:
          type: string
          description: 参加者の名前
          example: 松本花子
          minLength: 1
        email:
          type: string
          description: 参加者のメールアドレス
          format: email
          example: hoge@mail.com
      required:
        - name
        - email
    PatchParticipantRegistrationStatusRequest:
      type: object
      properties:
        registrationStatus:
          description: 参加者の在籍ステータス（在籍中/休会中/退会済み）
          example: enroll
          $ref: '#/components/schemas/RegistrationStatus'
      required:
        - registrationStatus
    Teams:
      type: object
      properties:
        id:
          type: string
          description: チームを識別するための唯一のID
          format: uuid
          example: ae6b59c0-abff-4993-b2f5-76ba28e74c58
        name:
          type: number
          description: チームの名前
          minimum: 1
          maximum: 999
          example: '1'
        pairs:
          description: 所属ペアのID
          maxItems: 1
          example:
            - 2e8655d7-34d4-4e04-a2b9-fd7310177a39
            - 8c7fd5c4-5bca-47ac-b15e-70b747d56611
          type: array
          items:
            type: string
      required:
        - id
        - name
        - pairs
    GetTeamsResponse:
      type: object
      properties:
        teams:
          description: チームの一覧
          type: array
          items:
            $ref: '#/components/schemas/Teams'
      required:
        - teams
    PatchTeamRequest:
      type: object
      properties:
        pairId:
          description: ペアを識別するための一意なID
          minItems: 1
          example:
            - 2e8655d7-34d4-4e04-a2b9-fd7310177a39
            - 8c7fd5c4-5bca-47ac-b15e-70b747d56611
          type: array
          items:
            type: string
      required:
        - pairId
    Pairs:
      type: object
      properties:
        id:
          type: string
          description: ペアを識別するための唯一のID
          format: uuid
          example: ae6b59c0-abff-4993-b2f5-76ba28e74c58
        name:
          type: string
          description: ペアの名前
          minLength: 1
          example: 1c
        participants:
          description: 所属参加者のID
          maxItems: 2
          minItems: 3
          example:
            - 2e8655d7-34d4-4e04-a2b9-fd7310177a39
            - 8c7fd5c4-5bca-47ac-b15e-70b747d56611
          type: array
          items:
            type: string
      required:
        - id
        - name
        - participants
    GetPairsResponse:
      type: object
      properties:
        teams:
          description: ペアの一覧
          type: array
          items:
            $ref: '#/components/schemas/Pairs'
      required:
        - teams
    PatchPairRequest:
      type: object
      properties:
        participantId:
          description: 参加者を識別するための一意なID
          minItems: 1
          example:
            - 2e8655d7-34d4-4e04-a2b9-fd7310177a39
            - 8c7fd5c4-5bca-47ac-b15e-70b747d56611
          type: array
          items:
            type: string
      required:
        - participantId
    PostIssuesRequest:
      type: object
      properties:
        name:
          type: string
          description: 課題の名前
          example: プラハチャレンジをDDDで実装する
      required:
        - name
    Issues:
      type: object
      properties:
        id:
          type: string
          description: 課題を識別するための唯一のID
          format: uuid
          example: 354efbbe-3738-4dfe-bc93-2615e90825b4
        name:
          type: string
          description: 課題の名前
          example: プラハチャレンジをDDDで実装する
        progressionStatus:
          description: 参加者ごとの課題の進捗ステータス（未着手/着手中/レビュー待ち/完了）
          example: working
          $ref: '#/components/schemas/ProgressionStatus'
      required:
        - id
        - name
        - progressionStatus
    PatchIssueProgressionStatusRequest:
      type: object
      properties:
        progressionStatus:
          description: 参加者ごとの課題の進捗ステータス（未着手/着手中/レビュー待ち/完了）
          example: waitingForReview
          $ref: '#/components/schemas/ProgressionStatus'
      required:
        - progressionStatus
