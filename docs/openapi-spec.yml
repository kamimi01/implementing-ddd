openapi: 3.0.0
paths:
  /participants:
    get:
      operationId: ParticipantController_getParticipants
      summary: 参加者の一覧の取得または条件付き取得
      description: '- パラメータが存在しない場合は、条件なしで参加者の一覧を取得する'
      parameters:
        - name: page
          required: false
          in: query
          description: 取得するページ番号
          example: 1
          schema:
            minimum: 1
            type: number
        - name: issueIds
          required: false
          in: query
          description: 課題を識別するための唯一のID
          example:
            - 5
            - 12
          schema:
            type: array
            items:
              type: string
        - name: progressionStatus
          required: false
          in: query
          description: 参加者ごとの課題の進捗ステータス（未着手/着手中/レビュー待ち/完了）
          example: working
          schema:
            $ref: '#/components/schemas/ProgressionStatus'
      responses:
        '200':
          description: 取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetParticipantsResponse'
      tags: &ref_0
        - 参加者
    post:
      operationId: ParticipantController_createParticipants
      summary: 参加者の新規追加
      description: '- 参加者の新規追加を行う'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostParticipantsRequest'
      responses:
        '201':
          description: 登録成功のため、登録された参加者の情報を返却する
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Participants'
      tags: *ref_0
  /participants/{participant_id}/registration-status:
    patch:
      operationId: ParticipantController_updateParticipantRegistrationStatus
      summary: 参加者ごとの在籍ステータスの更新
      description: '- 参加者ごとの在籍ステータスの更新を行う'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchParticipantRegistrationStatusRequest'
      responses:
        '200':
          description: 更新成功のため、更新された参加者の情報を返却する
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Participants'
      tags: *ref_0
  /teams:
    get:
      operationId: TeamController_getPairs
      parameters: []
      responses:
        '200':
          description: ''
      tags:
        - チーム
  /pairs:
    get:
      operationId: PairController_getPairs
      parameters: []
      responses:
        '200':
          description: ''
      tags:
        - ペア
  /issues:
    post:
      operationId: IssueController_createIssues
      summary: 課題の新規追加
      description: '- 課題の新規追加を行う'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostIssuesRequest'
      responses:
        '201':
          description: 登録成功のため、登録された課題の情報を返却する
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issues'
      tags: &ref_1
        - 課題
  /issues/{issue_id}/participants/{participant_id}/progression-status:
    patch:
      operationId: IssueController_updateIssueProgressionStatus
      summary: 課題の進捗ステータスを参加者ごとに更新
      description: '- 参加者ごとの課題の進捗ステータスの更新を行う'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchIssueProgressionStatusRequest'
      responses:
        '200':
          description: 更新成功のため、更新された課題の情報を返却する
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issues'
      tags: *ref_1
info:
  title: Praha ChallengeをDDDで実装する
  description: '- Praha ChallengeをDDDで実装する'
  version: '1.0'
  contact: {}
tags: []
servers:
  - url: http://localhost/api/v1
components:
  schemas:
    ProgressionStatus:
      type: string
      enum:
        - notStarted
        - working
        - waitingForReview
        - completed
    RegistrationStatus:
      type: string
      enum:
        - enroll
        - recess
        - withdrawal
    Participants:
      type: object
      properties:
        id:
          type: string
          description: 参加者を識別するための唯一のID
          format: uuid
          example: ae6b59c0-abff-4993-b2f5-76ba28e74c58
        name:
          type: string
          description: 参加者の名前
          example: 松本花子
        email:
          type: string
          description: 参加者のメールアドレス
          format: email
          example: hoge@mail.com
        registrationStatus:
          description: 参加者の在籍ステータス（在籍中/休会中/退会済み）
          example: recess
          $ref: '#/components/schemas/RegistrationStatus'
      required:
        - id
        - name
        - email
        - registrationStatus
    GetParticipantsResponse:
      type: object
      properties:
        participants:
          description: 参加者の一覧（1回で最大10人の情報を取得）
          maxItems: 10
          type: array
          items:
            $ref: '#/components/schemas/Participants'
      required:
        - participants
    PostParticipantsRequest:
      type: object
      properties:
        name:
          type: string
          description: 参加者の名前
          example: 松本花子
          minLength: 1
        email:
          type: string
          description: 参加者のメールアドレス
          format: email
          example: hoge@mail.com
      required:
        - name
        - email
    PatchParticipantRegistrationStatusRequest:
      type: object
      properties:
        registrationStatus:
          description: 参加者の在籍ステータス（在籍中/休会中/退会済み）
          example: enroll
          $ref: '#/components/schemas/RegistrationStatus'
      required:
        - registrationStatus
    PostIssuesRequest:
      type: object
      properties:
        name:
          type: string
          description: 課題の名前
          example: プラハチャレンジをDDDで実装する
      required:
        - name
    Issues:
      type: object
      properties:
        id:
          type: string
          description: 課題を識別するための唯一のID
          format: uuid
          example: 354efbbe-3738-4dfe-bc93-2615e90825b4
        name:
          type: string
          description: 課題の名前
          example: プラハチャレンジをDDDで実装する
        progressionStatus:
          description: 参加者ごとの課題の進捗ステータス（未着手/着手中/レビュー待ち/完了）
          example: working
          $ref: '#/components/schemas/ProgressionStatus'
      required:
        - id
        - name
        - progressionStatus
    PatchIssueProgressionStatusRequest:
      type: object
      properties:
        progressionStatus:
          description: 参加者ごとの課題の進捗ステータス（未着手/着手中/レビュー待ち/完了）
          example: waitingForReview
          $ref: '#/components/schemas/ProgressionStatus'
      required:
        - progressionStatus
